---
- name: Initialize empty VM list
  ansible.builtin.set_fact:
    proxmox_inventory_vms: []

- name: Register all available VM's on vm host with in allowed range ({{ proxmox_server_iprange.start.split('.')[-1] }}..{{ proxmox_server_iprange.end.split('.')[-1] }})  # noqa risky-shell-pipe
  ansible.builtin.shell: "qm list | awk '{print $1}' | tail -n +2 | numgrep '/{{ proxmox_server_iprange.start.split('.')[-1] }}..{{ proxmox_server_iprange.end.split('.')[-1] }}/'"
  register: proxmox_registered_vms
  changed_when: false
  failed_when: "proxmox_registered_vms.rc not in [0, 1]"

- name: Set current inventory based on all existing VM's on vm host
  ansible.builtin.set_fact:
    proxmox_inventory_vms: "{{ proxmox_inventory_vms + (proxmox_registered_vms.stdout_lines | default([])) }}"
  when: proxmox_registered_vms.stdout_lines is defined

- name: Initialize provision new VMs list
  ansible.builtin.set_fact:
    proxmox_provision_vms: []
  delegate_to: localhost

- name: Set discovered new VMs
  ansible.builtin.set_fact:
    proxmox_provision_vms: "{{ proxmox_provision_vms + [hostvars[item].vmid] }}"
  loop: "{{ groups.servers }}"
  when:
    - inventory_hostname == hostvars[item].node | default(proxmox_default_node)
  delegate_to: localhost

- name: Add discovered VMs to provision group
  ansible.builtin.add_host:
    name: "{{ item }}"
    groups: proxmox_provision
  when:
    - hostvars[item].vmid | string not in proxmox_inventory_vms
    - inventory_hostname == hostvars[item].node | default(proxmox_default_node)
  loop: "{{ groups.servers }}"

- name: Set deprovision inventory
  ansible.builtin.set_fact:
    proxmox_deprovision_vms: "{{ (proxmox_inventory_vms | map('int') | list | difference(proxmox_provision_vms)) | list }}"
  delegate_to: localhost

- name: Add hosts to deprovision to deprovision group
  ansible.builtin.add_host:
    name: "{{ item | string }}"
    groups: proxmox_deprovision
  loop: "{{ proxmox_deprovision_vms }}"
  delegate_to: localhost

- name: Set fact for pihole_subnet
  ansible.builtin.set_fact:
    proxmox_subnet: "{{ proxmox_subnet | regex_replace('\\.[^\\.]*$', '') }}"

- name: Set fact for static IP based on vmid
  ansible.builtin.set_fact:
    vmid_ip: "{{ proxmox_subnet }}.{{ hostvars[item].vmid }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  when:
    - inventory_hostname == hostvars[item].node | default(proxmox_default_node)
  loop: "{{ groups.servers }}"
