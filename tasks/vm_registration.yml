---
- name: Initialize empty VM list
  ansible.builtin.set_fact:
    proxmox_inventory_vms: []

- name: Register all available VM's on vm host with in allowed range ({{ proxmox_server_iprange.start.split('.')[-1] }}..{{ proxmox_server_iprange.end.split('.')[-1] }})  # noqa risky-shell-pipe name[template] yaml[line-length]
  ansible.builtin.shell: "qm list | awk '{print $1}' | tail -n +2 | numgrep '/{{ proxmox_server_iprange.start.split('.')[-1] }}..{{ proxmox_server_iprange.end.split('.')[-1] }}/'"  # noqa yaml[line-length]
  register: proxmox_registered_vms
  changed_when: false
  failed_when: "proxmox_registered_vms.rc not in [0, 1]"

- name: Set current inventory based on all existing VM's on vm host
  ansible.builtin.set_fact:
    proxmox_inventory_vms: "{{ proxmox_inventory_vms + (proxmox_registered_vms.stdout_lines | default([])) }}"
  when: proxmox_registered_vms.stdout_lines is defined

- name: Set discovered new VMs
  ansible.builtin.set_fact:
    proxmox_provision_vms: "{{ proxmox_provision_vms + [item.vmid] }}"
  loop: "{{ vms }}"
  when:
    - inventory_hostname == item.node | default(inventory_hostname)
  delegate_to: localhost

- name: Add discovered VMs to provision group
  ansible.builtin.add_host:
    name: "{{ item.name }}"
    groups: "proxmox_provision_{{ inventory_hostname }}"
    vmid: "{{ item.vmid }}"
    cores: "{{ item.cores | default(proxmox_default_cores) }}"
    memory: "{{ item.memory | default(proxmox_default_memory) }}"
    disk: "{{ item.disk | default(proxmox_default_disk) }}"
    storage: "{{ item.storage | default(proxmox_default_storage) }}"
    template: "{{ item.template | default(proxmox_default_template) }}"
    node: "{{ item.node | default(inventory_hostname) }}"
  when:
    - item.vmid | string not in proxmox_inventory_vms
    - inventory_hostname == item.node | default(inventory_hostname)
  loop: "{{ vms }}"

- name: Set deprovision inventory
  ansible.builtin.set_fact:
    proxmox_deprovision_vms: "{{ (proxmox_inventory_vms | map('int') | list | difference(proxmox_provision_vms)) | list }}"
  delegate_to: localhost

- name: Add hosts to deprovision to deprovision group
  ansible.builtin.add_host:
    name: "{{ item | string }}"
    groups: "proxmox_deprovision_{{ inventory_hostname }}"
  loop: "{{ proxmox_deprovision_vms }}"
  delegate_to: localhost

- name: Set fact for static IP based on vmid
  ansible.builtin.set_fact:
    vmid_ip: "{{ proxmox_subnet_stripped }}.{{ item.vmid }}"
  delegate_to: "{{ item.name }}"
  delegate_facts: true
  vars:
    proxmox_subnet_stripped: "{{ proxmox_subnet | regex_replace('\\.[^\\.]*$', '') }}"
  when:
    - inventory_hostname == item.node | default(inventory_hostname)
  loop: "{{ vms }}"
